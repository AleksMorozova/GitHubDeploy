name: .NET Core Desktop CI

on:
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"

jobs:
  build:

    strategy:
      matrix:
        configuration: [Debug, Release]

    runs-on: windows-latest

    env:
      Solution_Name: GitAction/GitAction.sln                         # Solution file located at the root of the repository
      Test_Project_Path: GitAction/TestProject1/TestProject1.csproj  # Adjust this path to your test project
      Wap_Project_Directory: GitAction/WebApplication1               # Adjust this path if your WAP project is inside a folder
      Wap_Project_Path: GitAction/WebApplication1/WebApplication1.csproj
      Base64_Encoded_Pfx: ${{ secrets.Base64_Encoded_Pfx }}   # Store the secret in an env variable for easier conditional use

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v2

    - name: Restore NuGet packages
      run: dotnet restore ${{ env.Solution_Name }}  # Path to your solution file

    - name: Build solution
      run: dotnet build ${{ env.Solution_Name }} --configuration ${{ matrix.configuration }}

    - name: Run unit tests
      run: dotnet test ${{ env.Test_Project_Path }} --configuration ${{ matrix.configuration }}

    - name: Decode PFX certificate
      if: ${{ env.Base64_Encoded_Pfx != '' }}  # Check if the secret is not empty
      run: |
        $pfx_cert_byte = [System.Convert]::FromBase64String("${{ env.Base64_Encoded_Pfx }}")
        $certificatePath = Join-Path -Path $env:Wap_Project_Directory -ChildPath GitHubActionsWorkflow.pfx
        [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    - name: Create app package
      if: ${{ env.Base64_Encoded_Pfx != '' }}  # Check if the secret is not empty
      run: msbuild $env:Wap_Project_Path /p:Configuration=${{ matrix.configuration }} /p:UapAppxPackageBuildMode=StoreUpload /p:AppxBundle=Always /p:AppxBundlePlatforms="x86|x64" /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}

    - name: Remove the PFX
      if: ${{ env.Base64_Encoded_Pfx != '' }}  # Check if the secret is not empty
      run: Remove-Item -Path "$env:Wap_Project_Directory\GitHubActionsWorkflow.pfx"

    - name: Upload package artifact
      if: ${{ env.Base64_Encoded_Pfx != '' }}  # Check if the secret is not empty
      uses: actions/upload-artifact@v4
      with:
        name: MSIX Package
        path: ${{ env.Wap_Project_Directory }}\AppPackages
